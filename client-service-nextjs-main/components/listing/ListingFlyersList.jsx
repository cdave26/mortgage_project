import React, { useState, useRef, useEffect } from "react";
import { Col, Space } from "antd";
import { DownloadOutlined } from "@ant-design/icons";
import { shallowEqual, useDispatch, useSelector } from "react-redux";
import Link from "next/link";
import config from "~/config";
import qrcode from "qrcode";

import {
  downloadFlyerAction,
  getFlyerTemplatesAction,
  handleListingFlyerModal,
} from "~/store/flyers/action";
import { FLYERS } from "~/store/flyers/type";
import { clipboardWriteText } from "~/plugins/copyToClipboard";

import CustomButton from "../base/CustomButton";
import FlyerModal from "./ListingFlyersModal";
import DownloadModal from "../base/modal/DownloadModal";

const controller = new AbortController();
const { signal } = controller;

const ListingFlyersList = ({ listing, loading }) => {
  const linkRef = useRef(null);

  const [flyersDownload, setFlyersDownload] = useState({
    open: false,
    progress: 0,
    onRequested: false,
  });
  const [qrImage, setQRImage] = useState("");

  const dispatch = useDispatch();

  const { generatedFlyer, generatedFlyerLoading } = useSelector((state) => {
    return {
      generatedFlyer: state.listings.listingGeneratedFlyer.data,
      generatedFlyerLoading: state.listings.listingGeneratedFlyer.loading,
    };
  }, shallowEqual);

  const downloadFile = (flyerId) => {
    const modifiedFileName = flyerId.replace("generated_pdf/", "");
    dispatch(
      downloadFlyerAction({
        fileName: modifiedFileName,
        flyerId,
        flyersDownload,
        setFlyersDownload,
        signal,
      })
    );
  };

  const renderQRCode = async (listing) => {
    const qrCodeImage = await qrcode.toDataURL(listing.page_link);
    setQRImage(qrCodeImage);
  };

  useEffect(() => {
    if (Object.keys(listing).length) {
      renderQRCode(listing);
    }
  }, [listing]);

  const handleCancelDownload = () => {
    if (flyersDownload.onRequested) return;

    setFlyersDownload({
      ...flyersDownload,
      open: false,
      progress: 0,
      onRequested: false,
    });

    controller.abort();
  };

  const columns = [
    {
      title: "Flyer File Name",
      dataIndex: "generated_flyer",
      key: "generated_flyer",
      render: (generatedFlyer) => {
        const modifiedFileName = generatedFlyer.replace("generated_pdf/", "");
        return modifiedFileName;
      },
      ellipsis: true,
      width: "25%",
    },
    {
      title: "Date Generated",
      dataIndex: "updated_at",
      key: "updated_at",
      ellipsis: true,
      width: "15%",
    },
    {
      title: "Generated By",
      dataIndex: "generated_by",
      key: "generated_by",
      ellipsis: true,
      width: "15%",
    },
    {
      title: "",
      dataIndex: "generated_flyer",
      key: "download_btn",
      width: "4%",
      fixed: "right",
      render: (generatedFlyer) => (
        <Link
          href={`${config.storagePath}${generatedFlyer}`}
          onClick={async (event) => {
            event.preventDefault();

            setFlyersDownload({
              ...flyersDownload,
              open: true,
            });

            downloadFile(generatedFlyer);
          }}
        >
          <DownloadOutlined className="cursor-pointer text-neutral-2 text-xl font-bold" />
        </Link>
      ),
    },
  ];

  const downloadQRCode = async () => {
    const qrCodeImage = await qrcode.toDataURL(listing.page_link);
    if (qrCodeImage) {
      const a = document.createElement("a");
      a.download = `${listing.url_identifier}-mls${listing.mls_number}-QRCode.png`;
      a.href = qrCodeImage;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }
  };

  const Container = ({ label, children }) => {
    return (
      <div className="pb-4 flex-1 text-center border border-solid border-alice-blue box-border rounded-3xl md:max-h-[409px] md:h-[409px] md:min-h-[250px]">
        <div>
          <div
            style={{ padding: "15px", borderBottom: "1px solid #E5E5E5" }}
            className="text-neutral-1 font-sharp-sans-bold mb-5"
          >
            {label}
          </div>
          {children}
        </div>
      </div>
    );
  };

  const nativeUplistBtnHtml = () => {
    return `<a href="${listing.page_link}" target="_blank"><img decoding="async" src='${config.awsStorageUrl}/assets/uplist-pwr-up-btn.png' onmouseover="this.src='${config.awsStorageUrl}/assets/uplist-pwr-up-hov.png'" onmouseout="this.src='${config.awsStorageUrl}/assets/uplist-pwr-up-btn.png'" onmousedown="this.src='${config.awsStorageUrl}/assets/uplist-pwr-up-act.png'" border="0" style="max-width: 200px;" /></a>`;
  };

  return (
    <>
      <Col className="flex-1 flex flex-col lg:flex-row gap-10 w-full h-auto">
        <Container label={"Flyer"}>
          {!(loading || generatedFlyerLoading) && (
            <>
              <div className="mb-5">
                {generatedFlyer.length > 0 ? (
                  <CustomButton
                    label="Download PDF"
                    onClick={() => {
                      downloadFile(generatedFlyer[0].generated_flyer);
                    }}
                  />
                ) : (
                  <CustomButton
                    label="Create a Flyer"
                    onClick={() => {
                      dispatch(handleListingFlyerModal(true));
                      // get listing generated flyers
                      dispatch(
                        getFlyerTemplatesAction({
                          page: 1,
                          limit: FLYERS.FLYER_TEMPLATE_SIZE,
                          type: "listing",
                        })
                      );
                    }}
                  />
                )}
              </div>

              {generatedFlyer.length > 0 && (
                <div className="px-5 mb-5 mx-auto  max-w-[200px] max-h-[240px]">
                  <img
                    src={`${config.storagePath}${generatedFlyer[0].flyer_image}`}
                    alt="flyer-thumbnail"
                    className="w-full h-full"
                  />
                </div>
              )}

              {generatedFlyer.length > 0 && (
                <div
                  role="button"
                  className="my-0 text-xanth font-sharp-sans-bold cursor-pointer"
                  onClick={() => {
                    dispatch(handleListingFlyerModal(true));
                    // get listing generated flyers
                    dispatch(
                      getFlyerTemplatesAction({
                        page: 1,
                        limit: FLYERS.FLYER_TEMPLATE_SIZE,
                        type: "listing",
                      })
                    );
                  }}
                >
                  Change Flyer Design
                </div>
              )}
            </>
          )}
        </Container>
        <Container label={"Website"}>
          {!loading && (
            <>
              <div className="mb-5">
                <CustomButton
                  label="Copy URL"
                  onClick={(_) =>
                    clipboardWriteText(listing.page_link, dispatch)
                  }
                />
              </div>

              <Link
                href={listing.page_link}
                target="_blank"
                rel="noopener noreferrer"
                className="my-0 text-denim font-sharp-sans-medium underline"
              >
                Website link
              </Link>
            </>
          )}
        </Container>
        <Container label={"Button"}>
          {!loading && (
            <>
              <div className="mb-5">
                <CustomButton
                  label="Copy HTML"
                  onClick={() => {
                    clipboardWriteText(nativeUplistBtnHtml(), dispatch);
                  }}
                />
              </div>
              <div className="flex justify-center items-center px-2">
                <a
                  ref={linkRef}
                  href={listing.page_link}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <img
                    decoding="async"
                    src={`${config.awsStorageUrl}/assets/uplist-pwr-up-btn.png`}
                    onMouseOver={(e) =>
                      (e.currentTarget.src = `${config.awsStorageUrl}/assets/uplist-pwr-up-hov.png`)
                    }
                    onMouseOut={(e) =>
                      (e.currentTarget.src = `${config.awsStorageUrl}/assets/uplist-pwr-up-btn.png`)
                    }
                    onMouseDown={(e) =>
                      (e.currentTarget.src = `${config.awsStorageUrl}/assets/uplist-pwr-up-act.png`)
                    }
                    border="0"
                    style={{ maxWidth: "200px" }}
                  />
                </a>
              </div>
            </>
          )}
        </Container>
        <Container label={"QR Code"}>
          {!loading && (
            <>
              <div>
                <CustomButton
                  label="Download QR"
                  onClick={() => downloadQRCode(listing)}
                />
              </div>
              <Space className="my-3">
                <img src={qrImage} alt="listing-link" />
              </Space>
              <div className="text-neutral-3 text-xs">
                QR for this listing <br /> (You can use it on your own flyers)
              </div>
            </>
          )}
        </Container>
      </Col>
      <FlyerModal />
      <DownloadModal
        name="flyers"
        open={flyersDownload.open}
        progress={flyersDownload.progress}
        onCancel={handleCancelDownload}
      />
    </>
  );
};

export default ListingFlyersList;
